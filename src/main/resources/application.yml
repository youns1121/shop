#그룹화
spring:
  profiles:
    group:
      "local": "local,common"
      "test": "test,common"

---
#공통설정
spring:
  config:
    activate:
      on-profile: "common"

server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  error:
    include-exception: true
    include-message: on_param # 파라미터가 있을 때 사용
    include-stacktrace: on_param
    include-binding-errors: on_param
    whitelabel:
      enabled: true # 오류 처리 화면을 못 찾을 시, 스프링 whitelabel 오류 페이지 적용
    path: /error


custom:
  path:
    itemImgLocation:      # 상품 이미지 업로드 경로
    uploadPath:       #리소스 업로드 경로


---
#local


spring:
  servlet:
    multipart:
      max-file-size: 20MB #파일 한 개당 최대 사이즈
      max-request-size: 100MB # 요청당 최대 파일 크기


  config:
    activate:
      on-profile: "local"



  devtools: #Live Reload 기능 활성화화
   livereload:
      enabled: true

  thymeleaf: #Thymeleaf cache 사용중지, 개발환경에서는 캐싱기능을 off
    cache: false


  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/shop?characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: root
    password: wjdqhqhdks

  jpa:
    open-in-view: true
    hibernate:
      ddl-auto: update # create : 기존 테이블 드랍후 새로 생성
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false #true라면 JPA가 사용하는 기본 넘버링 전략으로 사용됨

    properties:
      hibernate:
        default_batch_fetch_size: 1000 # 기본 batch size 설정
        format_sql: true # sql이 한줄 출력이 아닌 정렬됨
        show-sql: true # 테이블 생성 정보가 console상에 출력됨


logging.level:
  org.hibernate.SQL: debug

---
#test


spring:
  config:
    activate:
      on-profile: "test"

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:test  #jdbc:h2:tcp://localhost/~/shop #jdbc:h2:~/shop : 최소 한번 #jdbc:h2:mem:test
    username: sa
    password:


  jpa:
    database-platform=org:
      hibernate:
        dialect: H2Dialect
    open-in-view: true
    hibernate:
      ddl-auto: create # create : 기존 테이블 드랍후 새로 생성
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false #true라면 JPA가 사용하는 기본 넘버링 전략으로 사용됨

    properties:
      hibernate:
        format_sql: true # sql이 한줄 출력이 아닌 정렬됨
        show-sql: true # 테이블 생성 정보가 console상에 출력됨

logging.level:
  org.hibernate.SQL: debug


